# Функция для проверки правильности скобочной записи
def check_brackets(s):
    # Создаем пустой стек для хранения скобок
    stack = []
    # Создаем словарь для хранения соответствующих пар скобок
    brackets = {'(': ')', '[': ']', '{': '}'}

    # Разделяем строку на отдельные символы, учитывая скобки и умножение
    s = s.replace('(', ' ( ').replace(')', ' ) ').replace('[', ' [ ').replace(']', ' ] ').replace('{', ' { ').replace(
        '}', ' } ').split()
    # Проходим по каждому символу в строке
    i = 0
    while i < len(s):
        # Если символ является степенью
        if s[i].startswith('^'):
            # Получаем значение степени
            power = int(s[i][1:])
            # Заменяем символ степени и предыдущий символ на несколько предыдущих символов
            s[i - 1:i + 1] = [s[i - 1]] * power
        # Переходим к следующему символу
        i += 1
    # Объединяем символы обратно в строку
    s = ''.join(s)
    # Проходим по каждому символу в строке
    for char in s:
        # Если символ является открывающей скобкой
        if char in brackets.keys():
            # Добавляем его в стек
            stack.append(char)
        # Если символ является закрывающей скобкой
        elif char in brackets.values():
            # Если стек пуст или последняя открывающая скобка в стеке не соответствует текущей закрывающей скобке
            if len(stack) == 0 or brackets[stack.pop()] != char:
                # Возвращаем False, указывая на неправильную скобочную запись
                return False
    # Если стек пуст, возвращаем True, указывая на правильную скобочную запись
    return len(stack) == 0


print(check_brackets('(([]))^2'))
print(check_brackets('((]))'))
print(check_brackets('(^2[]))'))
print(check_brackets('(^3[])))'))
print(check_brackets('(^9[^8]^8)^9'))
print(check_brackets('(^5[])))))'))
